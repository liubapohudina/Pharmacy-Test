{"mappings":"gBAYAA,EAVA,SAAoBC,GAChB,IAKMC,EALMD,EAASE,QAAO,SAACC,EAAKC,GAG9B,OAAOD,EAFOE,WAAWD,EAAQE,OAChBC,SAASH,EAAQI,S,GAEnC,GACoBC,QAAQ,GAC/B,MAAO,mBAA4BC,OAATT,EAAS,O,ECThC,SAASU,EAAqBX,GACjC,IACIY,aAAaC,QAAQ,aAAcC,KAAKC,UAAUf,IAClDY,aAAaI,WAAW,aACxBJ,aAAaI,WAAW,Y,CAE1B,MAAOC,GAEL,OADAC,MAAMD,GACCA,C,MCmCfE,EAxCA,SAAuBnB,GACnB,IAAMoB,EAAUC,SAASC,iBAAiB,mBACpCC,EAAiBF,SAASG,cAAc,eAC9CC,EAAA1B,EACYC,GACZuB,EAAeG,UAAYD,EAE3BL,EAAQO,SAAQ,SAAAC,GACZA,EAAOC,iBAAiB,SAAS,WAC7B,IAAMC,EAASF,EAAOG,QAAQD,OACxBE,EAAOJ,EAAOK,QAAQ,oBACtBC,EAAUF,EAAKR,cAAc,UAC/BW,EAAe5B,SAAS2B,EAAQE,aAEpC,GAAe,cAAXN,EACAK,GAAgB,OACb,GAAe,cAAXL,EACP,GAAIK,EAAe,EACfA,GAAgB,MACb,CACH,IAAME,EAAUC,QAAQ,4CACxBC,QAAQC,IAAIH,E,CAGpBH,EAAAE,YAAAD,EAC6BM,WAC7B,IAAAC,EAAAV,EAAAW,GAEuB3C,EAAS4C,MAAK,SAAAxC,G,OAAWA,EAAQyC,MAAQH,C,IACjDlC,SAAW2B,EAE1BV,EAAA1B,EACQC,GACRuB,EAAeG,UAAYD,EAE1Bb,aAAaC,QAAQ,YAAaC,KAAKC,UAAUf,G,YCF9D8C,EAlCA,SAAsBC,GACpBA,EAAMC,iBACJ,IAAMC,EAAOF,EAAMG,OACnBX,QAAQC,IAAIS,GACd,IAAME,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAAQL,EAAKG,SAASE,MAAMD,MAC5BE,EAAQN,EAAKG,SAASG,MAAMF,MAC5BG,EAAUP,EAAKG,SAASI,QAAQH,MACtC,GAAa,KAATF,GAAyB,KAAVG,GAA0B,KAAVC,GAA4B,KAAZC,EACjD,OAAOjB,QAAQC,IAAI,kCAErB,IAAAiB,EACiB,CACXN,KAAMA,EACNG,MAAOA,EACPC,MAAOA,EACPC,QAASA,GAGPE,EAAY5C,KAAK6C,MAAM/C,aAAagD,QAAQ,eAAiB9C,KAAK6C,MAAM/C,aAAagD,QAAQ,cAC7FC,EAAcC,KAAKC,MAEEC,EFZtBlD,KAAK6C,MAAM/C,aAAagD,QAAQ,gBEajC,GACJI,EAAAC,KAAA,CAEIC,OAAQL,EACRM,KAAMV,EACNzD,SAAU0D,IAEd/C,EACAqD,GACAf,EAAKmB,O,EC7BHC,EAAehD,SAASG,cAAc,gBAEtCH,SAAAG,cAAS,iBACLK,iBAAiB,SAAUiB,GAIrC,WACI,IACI,IAAI9C,EAAWc,KAAK6C,MAAM/C,aAAagD,QAAQ,eAAiB,GAChE,GAAI5D,EAASsE,OAAS,EAAG,CACrB,IAAMC,EAAsBvE,ECHvBwE,KAAI,SAAAxC,GACT,IAAMyC,EAASzC,EAAM0C,OAA+B,KAAtB1C,EAAK0C,MAAMC,OAAiB3C,EAAK0C,MAAQ,mEACvE,MAAO,mCACShE,OAD0BsB,EAAKa,IAAI,kCACnBnC,OAAhB+D,EAAO,WAEb/D,OAFsBsB,EAAK4C,MAAM,+FAGvBlE,OADVsB,EAAK4C,MAAM,yCACUlE,OAAXsB,EAAK1B,MAAM,kU,IAQhCuE,KAAK,IDVJR,EAAa3C,UAAY6C,EACzBpD,EAAcnB,E,MAEfqE,EAAa3C,UCWZ,4C,CDTN,MAAOT,GAEL,OADAsB,QAAQC,IAAIvB,GACLA,C,EAGf6D,E","sources":["src/helpers/totalPrice.js","src/helpers/localStorage.js","src/helpers/counter.js","src/helpers/eventSubmit.js","src/shopingCart.js","src/helpers/markup.js"],"sourcesContent":["\n\nfunction totalPrice(products) {\n    let total = products.reduce((acc, product) => {\n        const price = parseFloat(product.price);\n        const quantity = parseInt(product.quantity);\n        return acc + (price * quantity);\n    }, 0);\n    const fixPrice = total.toFixed(2);\n    return `<p>Total price: ${fixPrice}</p>`\n}\n\nexport default totalPrice;\n","export function setLocalStorageOrder(products) {\n    try {\n        localStorage.setItem('cartOrders', JSON.stringify(products));\n        localStorage.removeItem('cartItems');\n        localStorage.removeItem('cartOrder');\n\n    } catch (error) {\n        alert(error)\n        return error;\n    }\n}\nexport function getLocalStorage() {\n  return JSON.parse(localStorage.getItem('cartOrders'))\n}\n","import totalPrice from './totalPrice';\nimport { setLocalStorageOrder } from './localStorage';\n\nfunction counterBasket(products) {\n    const buttons = document.querySelectorAll(\"#counter button\");\n    const totalPriceInfo = document.querySelector(\"#totalPrice\");\n    /*------------------перший рендер товарів------------------*/\n    let total = totalPrice(products); \n    totalPriceInfo.innerHTML = total;\n\n    buttons.forEach(button => {\n        button.addEventListener(\"click\", () => {\n            const action = button.dataset.action;\n            const item = button.closest(\".itemDrugsBasket\");\n            const counter = item.querySelector(\"#value\");\n            let counterValue = parseInt(counter.textContent);\n\n            if (action === \"increment\") {\n                counterValue += 1;\n            } else if (action === \"decrement\") {\n                if (counterValue > 0) {\n                    counterValue -= 1;\n                } else {\n                    const message = confirm(\"Error. Click cannot be a negative number\");\n                    console.log(message);\n                }\n            }\n            /*-------------змінює значення спану на сторінці------------*/\n            counter.textContent = counterValue.toString();\n            /*-------------змінює значення quantity в об'єкті products----*/\n            const itemId = item.id;\n            const updatedProduct = products.find(product => product._id === itemId);\n            updatedProduct.quantity = counterValue;\n            \n            /*------------викликаємо тотал з новим quantity------*/\n            total = totalPrice(products); \n            totalPriceInfo.innerHTML = total;\n             \n             localStorage.setItem('cartOrder', JSON.stringify(products))\n        });\n    });\n}\n\nexport default counterBasket;\n","import { setLocalStorageOrder, getLocalStorage } from \"./localStorage\";\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n    const form = event.target;\n    console.log(form)\n  const name = form.elements.name.value;\n  const email = form.elements.email.value;\n  const phone = form.elements.phone.value;\n  const address = form.elements.address.value;\n  if (name === \"\" || email === \"\" || phone === '' || address === '') {\n    return console.log(\"Please fill in all the fields!\");\n  }\n  /*---------------збираємо дані--------------*/\n       const userData = {\n        name: name,\n        email: email,\n        phone: phone,\n        address: address\n    };\n  \n    const cartOrder = JSON.parse(localStorage.getItem('cartOrder')) || JSON.parse(localStorage.getItem('cartItems'));\n    const orderNumber = Date.now();\n    /*--------------зберігаємо карту з замовленням----------------*/\n    /*----------отримуємо попередні замовлення---------------------*/\n    let existOrders = getLocalStorage() || [];\n    /*-------------додаємо поточне замовлення------------------*/\n    existOrders.push({\n        number: orderNumber,\n        user: userData,\n        products: cartOrder\n    });\n    /*---------------зберігаємо попередні і поточне замовлення-----------*/\n    setLocalStorageOrder(existOrders)\n    form.reset();\n}\nexport default handleSubmit;","import { MarkupBasket, BasketEmpty } from \"./helpers/markup\";\nimport counterBasket from \"./helpers/counter\";\nimport handleSubmit from \"./helpers/eventSubmit\";\n\n\nconst productsList = document.querySelector(\"#drugsBasket\");\n/*---------слухач на відправлення форми--------------*/\nconst orderForm = document.querySelector(\".contact-form\");\norderForm.addEventListener(\"submit\", handleSubmit);\n\n\n\nfunction getProductsBasket() {\n    try {\n        let products = JSON.parse(localStorage.getItem('cartItems')) || [];\n        if (products.length > 0) {\n            const markup = MarkupBasket(products);\n            productsList.innerHTML = markup;\n            counterBasket(products);\n        } else {\n           productsList.innerHTML =  BasketEmpty()\n        }        \n    } catch (error) {\n        console.log(error)\n        return error;\n    }\n}\ngetProductsBasket()\n\n"," export function MarkupMain(data) {\n        return data.map(item => {\n            const imgSrc = (item.image && item.image.trim() !== '') ? item.image : 'https://cdn1.iconfinder.com/data/icons/pikku-ui/16/image-512.png';\n            return `<li class=\"itemDrugs\" id=\"${item._id}\">\n                <img src=\"${imgSrc}\" alt=\"${item.title}\" loading=\"lazy\" />\n                <h3>${item.title}</h3>\n                <p>${item.price}</p>\n                <button class=\"addToCart\" type=\"button\">Add to Cart</button>\n            </li>`;\n        }).join('');\n}\n\nexport function MarkupBasket(data) {\n     return data.map(item => {\n            const imgSrc = (item.image && item.image.trim() !== '') ? item.image : 'https://cdn1.iconfinder.com/data/icons/pikku-ui/16/image-512.png';\n            return `<li class=\"itemDrugsBasket\" id=\"${item._id}\">\n                <img src=\"${imgSrc}\" alt=\"${item.title}\" loading=\"lazy\" width=\"300\"/>\n                <div class=\"infoDrug\"\n                <h3>${item.title}</h3>\n                <p id=\"price\">${item.price}</p>\n                    <div id=\"counter\">\n                    <button type=\"button\" data-action=\"decrement\">-1</button>\n                      <span id=\"value\">1</span>\n                    <button type=\"button\" data-action=\"increment\">+1</button>\n                 </div>\n                </div>\n            </li>`;\n        }).join('');\n}\n\nexport function BasketEmpty() {\n    return `<p>Basket is empty!Please add products</p>`\n}\n"],"names":["$32832fdecbc488b2$export$2e2bcd8739ae039","products","fixPrice","reduce","acc","product","parseFloat","price","parseInt","quantity","toFixed","concat","$eaa8ed41cf604a47$export$285ce132a954647a","localStorage","setItem","JSON","stringify","removeItem","error","alert","$7d2f04cefe95ecdf$export$2e2bcd8739ae039","buttons","document","querySelectorAll","totalPriceInfo","querySelector","total","innerHTML","forEach","button","addEventListener","action","dataset","item","closest","counter","counterValue","textContent","message","confirm","console","log","toString","itemId","id","find","_id","$6c4e1f9e5b24f81a$export$2e2bcd8739ae039","event","preventDefault","form","target","name","elements","value","email","phone","address","userData","cartOrder","parse","getItem","orderNumber","Date","now","existOrders","push","number","user","reset","$0a2a098f7abbc870$var$productsList","length","markup","map","imgSrc","image","trim","title","join","$0a2a098f7abbc870$var$getProductsBasket"],"version":3,"file":"shopingCart.5796d0dc.js.map"}