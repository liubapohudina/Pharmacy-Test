{"mappings":"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","sources":["src/helpers/totalPrice.js","src/helpers/counter.js","src/helpers/localStorage.js","src/helpers/events.js","src/shopingCart.js","src/helpers/markup.js"],"sourcesContent":["\n\nfunction totalPrice(products) {\n    let total = products.reduce((acc, product) => {\n        const price = parseFloat(product.price);\n        const quantity = parseInt(product.quantity);\n        return acc + (price * quantity);\n    }, 0);\n    const fixPrice = total.toFixed(2);\n    return fixPrice;\n}\n\nexport default totalPrice;\n","import totalPrice from './totalPrice';\n\nfunction counterBasket(products) {\n    const buttons = document.querySelectorAll(\"#counter button\");\n    const totalPriceInfo = document.querySelector(\"#totalPrice\");\n    /*------------------перший рендер товарів------------------*/\n    let total = totalPrice(products); \n    totalPriceInfo.innerHTML = `<p>Total price: ${total}</p>`;\n\n    buttons.forEach(button => {\n        button.addEventListener(\"click\", () => {\n            const action = button.dataset.action;\n            const item = button.closest(\".itemDrugsBasket\");\n            const counter = item.querySelector(\"#value\");\n            let counterValue = parseInt(counter.textContent);\n\n            if (action === \"increment\") {\n                counterValue += 1;\n            } else if (action === \"decrement\") {\n                if (counterValue > 0) {\n                    counterValue -= 1;\n                } else {\n                    const message = confirm(\"Error. Click cannot be a negative number\");\n                    console.log(message);\n                }\n            }\n            /*-------------змінює значення спану на сторінці------------*/\n            counter.textContent = counterValue.toString();\n            /*-------------змінює значення quantity в об'єкті products----*/\n            const itemId = item.id;\n            const updatedProduct = products.find(product => product._id === itemId);\n            updatedProduct.quantity = counterValue;\n            \n            /*------------викликаємо тотал з новим quantity------*/\n            total = totalPrice(products); \n            totalPriceInfo.innerHTML = `<p>Total price: ${total}</p>`;\n            /*------------записуємо новий тотал------------------*/\n            updatedProduct.total = total;\n\n             localStorage.setItem('cartOrder', JSON.stringify(products))\n        });\n    });\n}\n\nexport default counterBasket;\n","export function setLocalStorageOrder(products) {\n    try {\n        localStorage.setItem('cartOrders', JSON.stringify(products));\n        localStorage.removeItem('cartItems');\n        localStorage.removeItem('cartOrder');\n\n    } catch (error) {\n        alert(error)\n        return error;\n    }\n}\nexport function getLocalStorage() {\n  return JSON.parse(localStorage.getItem('cartOrders'))\n}\n","import { setLocalStorageOrder, getLocalStorage } from \"./localStorage\";\n\n/*-------------------------------EVENT SUBMIT----------------------------------------------------*/\nexport function handleSubmit(event) {\n    const form = event.target;\n    console.log(form)\n  const name = form.elements.name.value;\n  const email = form.elements.email.value;\n  const phone = form.elements.phone.value;\n  const address = form.elements.address.value;\n  if (name === \"\" || email === \"\" || phone === '' || address === '') {\n    return console.log(\"Please fill in all the fields!\");\n  }\n  /*---------------збираємо дані--------------*/\n       const userData = {\n        name: name,\n        email: email,\n        phone: phone,\n        address: address\n    };\n  \n    const cartOrder = JSON.parse(localStorage.getItem('cartOrder')) || JSON.parse(localStorage.getItem('cartItems'));\n    const orderNumber = Date.now();\n    /*--------------зберігаємо карту з замовленням----------------*/\n    /*----------отримуємо попередні замовлення---------------------*/\n    let existOrders = getLocalStorage() || [];\n    /*-------------додаємо поточне замовлення------------------*/\n    existOrders.push({\n        number: orderNumber,\n        user: userData,\n        products: cartOrder\n    });\n    /*---------------зберігаємо попередні і поточне замовлення-----------*/\n    setLocalStorageOrder(existOrders)\n    form.reset();\n}\n\n\n/*-------------------------------------------EVENT CLICK-----------------------------------*/\nconst drugsList = document.querySelector('#drugs');\n/*-----------------------ADD PRODUCT----------------*/\n export function addEventListeners() {\n    drugsList.addEventListener('click', function(event) {\n        if (event.target.classList.contains('addToCart')) {\n            const listItem = event.target.closest('li');\n            if (listItem) {\n                const itemId = listItem.getAttribute('id');\n                const itemTitle = listItem.querySelector('h3').innerText;\n                const itemPrice = listItem.querySelector('p').innerText;\n                const itemImage = listItem.querySelector('img').innerText;\n                const itemData = {\n                    _id: itemId,\n                    title: itemTitle,\n                    price: itemPrice,\n                    image: itemImage,\n                    quantity: 1,\n                    total : itemPrice,\n                };\n\n                let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];\n                const isItemInCart = cartItems.some(item => item._id === itemId);\n                if (!isItemInCart) {\n                    cartItems.push(itemData);\n                    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n                    alert('Item added to cart!');\n                } else {\n                    alert('Item is already in the cart!');\n                }\n            }\n        }\n    });\n}\n/*----------------------DELETE PRODUCT---------------------*/\nexport function handleClickDelete(productsList) {\n    productsList.addEventListener('click', function(event) {\n        if (event.target.classList.contains('btnDelete')) {\n            const listItem = event.target.closest('li');\n            if (listItem) {\n                const itemId = listItem.getAttribute('id');\n                let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];\n                cartItems = cartItems.filter(item => item._id !== itemId);\n                localStorage.setItem('cartItems', JSON.stringify(cartItems));\n                listItem.remove();\n            }\n        }\n    });\n}","import { MarkupBasket, BasketEmpty } from \"./helpers/markup\";\nimport counterBasket from \"./helpers/counter\";\nimport {handleSubmit, handleClickDelete} from \"./helpers/events\";\n\n\nconst productsList = document.querySelector(\"#drugsBasket\");\n/*---------слухач на відправлення форми--------------*/\nconst orderForm = document.querySelector(\".contact-form\");\norderForm.addEventListener(\"submit\", handleSubmit);\n\n\n\nfunction getProductsBasket() {\n    try {\n        let products = JSON.parse(localStorage.getItem('cartItems')) || [];\n        if (products.length > 0) {\n            const markup = MarkupBasket(products);\n            productsList.innerHTML = markup;\n            counterBasket(products);\n            handleClickDelete(productsList)\n        } else {\n           productsList.innerHTML =  BasketEmpty()\n        }        \n    } catch (error) {\n        console.log(error)\n        return error;\n    }\n}\ngetProductsBasket()\n\n"," export function MarkupMain(data) {\n        return data.map(item => {\n            const imgSrc = (item.image && item.image.trim() !== '') ? item.image : 'https://cdn1.iconfinder.com/data/icons/pikku-ui/16/image-512.png';\n            return `<li class=\"itemDrugs\" id=\"${item._id}\">\n                <img src=\"${imgSrc}\" alt=\"${item.title}\" loading=\"lazy\" />\n                <h3>${item.title}</h3>\n                <p>${item.price}</p>\n                <button class=\"addToCart\" type=\"button\">Add to Cart</button>\n            </li>`;\n        }).join('');\n}\n\nexport function MarkupBasket(data) {\n     return data.map(item => {\n            const imgSrc = (item.image && item.image.trim() !== '') ? item.image : 'https://cdn1.iconfinder.com/data/icons/pikku-ui/16/image-512.png';\n            return `<li class=\"itemDrugsBasket\" id=\"${item._id}\">\n                <img src=\"${imgSrc}\" alt=\"${item.title}\" loading=\"lazy\" width=\"300\"/>\n                <button class=\"btnDelete\" type=\"button\">X</button>\n                <div class=\"infoDrug\"\n                <h3>${item.title}</h3>\n                <p id=\"price\">${item.price}</p>\n                    <div id=\"counter\">\n                    <button type=\"button\" data-action=\"decrement\">-1</button>\n                      <span id=\"value\">1</span>\n                    <button type=\"button\" data-action=\"increment\">+1</button>\n                 </div>\n                </div>\n            </li>`;\n        }).join('');\n}\n\nexport function BasketEmpty() {\n    return `<p>Basket is empty!Please add products</p>`\n}\nexport function MarkupHistoryOrders(data) {\n    let markup = '';\n    data.forEach(order => {\n        order.products.map(item => {\n            const imgSrc = (item.image && item.image.trim() !== '') ? item.image : 'https://cdn1.iconfinder.com/data/icons/pikku-ui/16/image-512.png';\n            markup += `<li class=\"itemDrugs\" id=\"${item._id}\">\n                <img src=\"${imgSrc}\" alt=\"${item.title}\" loading=\"lazy\" />\n                <h3>${item.title}</h3>\n                <p>${item.price}</p>\n                <p>Quantity: ${item.quantity}</p>\n                <p>Total: ${item.total}</p>\n            </li>`;\n        });\n    });\n\n    return markup;\n}\n\n"],"names":["$32832fdecbc488b2$export$2e2bcd8739ae039","products","reduce","acc","product","parseFloat","price","parseInt","quantity","toFixed","$7d2f04cefe95ecdf$export$2e2bcd8739ae039","buttons","document","querySelectorAll","totalPriceInfo","querySelector","total","innerHTML","concat","forEach","button","addEventListener","action","dataset","item","closest","counter","counterValue","textContent","message","confirm","console","log","toString","itemId","id","updatedProduct","find","_id","localStorage","setItem","JSON","stringify","$eaa8ed41cf604a47$export$285ce132a954647a","removeItem","error","alert","$0a2a098f7abbc870$var$productsList","event","form","target","name","elements","value","email","phone","address","userData","cartOrder","parse","getItem","orderNumber","Date","now","existOrders","push","number","user","reset","length","markup","map","imgSrc","image","trim","title","join","classList","contains","listItem","getAttribute","cartItems","filter","remove","$0a2a098f7abbc870$var$getProductsBasket"],"version":3,"file":"shopingCart.2057d62f.js.map"}